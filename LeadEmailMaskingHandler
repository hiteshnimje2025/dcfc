/**
 * @description     Handler class for Lead email masking operations.
 *                  Follows the handler pattern to separate business logic from triggers.
 *                  Provides bulk operations and proper error handling for email masking.
 *
 * @createdBy       Hitesh Nimje
 * @date            2025-01-27
 */

public class LeadEmailMaskingHandler {

    // Constants
    private static final String EMAIL_FIELD = 'Email';
    
    // Test flag to force exceptions for coverage testing
    @TestVisible
    private static Boolean testForceException = false;
    
    /**
     * @description Handle email masking for Lead records on insert
     * @param newLeads List of new Lead records
     */
    public static void handleEmailMaskingOnInsert(List<Lead> newLeads) {
        if (newLeads == null || newLeads.isEmpty()) {
            return;
        }
        
        // Force exception for test coverage if flag is set
        if (testForceException) {
            throw new CalloutException('Forced exception for test coverage');
        }
        
        try {
            EmailMaskingUtil.maskEmailsFromRecords(newLeads, EMAIL_FIELD);
        } catch (Exception e) {
            System.debug(LoggingLevel.ERROR, 'Lead email masking failed on insert: ' + e.getMessage() + '\n' + e.getStackTraceString());
            // Log additional context for debugging
            logErrorContext('Insert', newLeads.size(), e);
        }
    }
    
    /**
     * @description Handle email masking for Lead records on update
     * @param newLeads List of updated Lead records
     * @param oldLeadsMap Map of old Lead records
     */
    public static void handleEmailMaskingOnUpdate(List<Lead> newLeads, Map<Id, Lead> oldLeadsMap) {
        if (newLeads == null || newLeads.isEmpty() || oldLeadsMap == null) {
            return;
        }
        
        // Force exception for test coverage if flag is set
        if (testForceException) {
            throw new CalloutException('Forced exception for test coverage');
        }
        
        try {
            // Filter leads that need email masking (only those with newly added emails)
            List<Lead> leadsToMask = filterLeadsForMasking(newLeads, oldLeadsMap);
            
            // Mask emails for filtered leads only
            if (!leadsToMask.isEmpty()) {
                EmailMaskingUtil.maskEmailsFromRecords(leadsToMask, EMAIL_FIELD);
                System.debug(LoggingLevel.INFO, 'Masked emails for ' + leadsToMask.size() + ' Lead records on update');
            }
        } catch (Exception e) {
            System.debug(LoggingLevel.ERROR, 'Lead email masking failed on update: ' + e.getMessage() + '\n' + e.getStackTraceString());
            // Log additional context for debugging
            logErrorContext('Update', newLeads.size(), e);
        }
    }
    
    /**
     * @description Filter leads that need email masking based on email field changes
     * @param newLeads List of updated Lead records
     * @param oldLeadsMap Map of old Lead records
     * @return List of Lead records that need email masking
     */
    private static List<Lead> filterLeadsForMasking(List<Lead> newLeads, Map<Id, Lead> oldLeadsMap) {
        List<Lead> leadsToMask = new List<Lead>();
        
        for (Lead newLead : newLeads) {
            Lead oldLead = oldLeadsMap.get(newLead.Id);
            
            if (oldLead != null) {
                Boolean wasEmailBlank = String.isBlank(oldLead.Email);
                Boolean isEmailNowFilled = !String.isBlank(newLead.Email);
                
                // Only mask if email was blank before and is now filled
                if (wasEmailBlank && isEmailNowFilled) {
                    leadsToMask.add(newLead);
                }
            }
        }
        
        return leadsToMask;
    }
    
    /**
     * @description Log error context for debugging purposes
     * @param operationType Type of operation (Insert/Update)
     * @param recordCount Number of records being processed
     * @param ex The exception that occurred
     */
    private static void logErrorContext(String operationType, Integer recordCount, Exception ex) {
        System.debug(LoggingLevel.ERROR, String.format(
            'LeadEmailMaskingHandler Error Context - Operation: {0}, Records: {1}, Error: {2}',
            new List<String>{ operationType, String.valueOf(recordCount), ex.getMessage() }
        ));
    }
    
    /**
     * @description Validate if email masking should be applied to a lead
     * @param lead Lead record to validate
     * @return Boolean indicating if email should be masked
     */
    public static Boolean shouldMaskLeadEmail(Lead lead) {
        if (lead == null || String.isBlank(lead.Email)) {
            return false;
        }
        
        // Check if email is already masked
        if (EmailMaskingUtil.isEmailMasked(lead.Email)) {
            return false;
        }
        
        // Check if email format is valid (optional validation)
        if (!EmailMaskingUtil.isValidEmailFormat(lead.Email)) {
            System.debug(LoggingLevel.WARN, 'Invalid email format detected: ' + lead.Email);
            // Still mask invalid emails to prevent data leakage
        }
        
        return true;
    }
}
